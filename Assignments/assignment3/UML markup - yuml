// Cool Class Diagram
// ------------------

// Chain elements like this
[Location]^[StoreLocation]<>1-1[Product]-0...*<>[List]
[Location]^[WHLocation]<>1-1[Queue]<>-0...*[Node]
// The second Node contains an invisible space (since the two Node classes are technically different)
[List]<-[Node ]
[Store]<>-0...*[StoreLocation]
[Store]<>-0...*[WHLocation]
[Store]<>-1[List]
[Control]<>-1[View]
[Control]<>-1[Store]


// Add more detail
[Control|- store: Store*; - view: View|- initStore(in store: Store*): void;- receiveProduct(): void; - fillOrder(): void; - locationTest(): void; queueTest(): void]

[View|+ showMenu(in choice: int&): void;+ getProduct(in product: string&): void; + getQuantity(in q: int&): void]

[Store|- name: string;- products: List*;- slocs: StoreLocation*;- whlocs: WHLocation*|+ findAvailableSLoc(out sloc: StoreLocation**): void;+ findAvailableWHLoc(out whloc: WHLocation**): void;+ findProduct(in name: string, out p: Product**): void]

[Location|- id: string;- product: string;-quantity: int; - NONE: string|+ isEmpty(): bool;+ isAvailable(): bool;_+ getCapacity(): int_;_+ add(in product: string, in amount: string): bool_;_+ remove(in amount: int): bool_]

[StoreLocation|-̲ ̲c̲o̲d̲e̲:̲ ̲c̲h̲a̲r̲;-̲ ̲c̲a̲p̲a̲c̲i̲t̲y̲:̲ ̲i̲n̲t̲;-̲ ̲n̲e̲x̲t̲I̲d̲:̲ ̲i̲n̲t̲|+ setProduct(): void;+ getFreeSpace(): int;+ getCapacity(): int;+ add(in product: string, in amount: string): bool;+ remove(in amount: int): bool]

[WHLocation|-̲ ̲c̲o̲d̲e̲:̲ ̲c̲h̲a̲r̲;-̲ ̲c̲a̲p̲a̲c̲i̲t̲y̲:̲ ̲i̲n̲t̲;-̲ ̲n̲e̲x̲t̲I̲d̲:̲ ̲i̲n̲t̲|+ getCapacity(): int;+ add(in product: string, in amount: string): bool;+ remove(in amount: int): bool]

[Product|+ name: string;+ storeLocation: StoreLocation*;+ whLocation: Queue*|+ addWHLocation(in whloc: WHLocation*): void;+ getFromStoreLocation(in quantity: int&): void;+ getFromWHLocation(in quantity: int&): void;+ fillOrder(in quantity: int&): void;+ StockStoreLocation(): void]

[List|- head: Node*|+ isEmpty(): bool;+ findProduct(in name: string, out prod: Product): void;+ add(in prod: Product*): void;+ del(in name: string, out goner: Product**): void]

[Node |+ data: Product*;+ next: Node*]

[Queue|- head: Node*;- tail: Node*|+ isEmpty(): bool;+ peekFirst(out whloc: WHLocation**): void;+ popFirst(out whloc: WHLocation**): void;+ addLast(out whloc: WHLocation**): void]

[Node|+ data: WHLocation*;+ next: Node*]
